// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package rmi;

public final class CalcImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("void accumulate(double)"),
	new java.rmi.server.Operation("double accumulated()"),
	new java.rmi.server.Operation("double sub(double, double)"),
	new java.rmi.server.Operation("double sum(double, double)")
    };
    
    private static final long interfaceHash = -1114972762820418935L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (hash != interfaceHash)
	    throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	
	rmi.CalcImpl server = (rmi.CalcImpl) obj;
	switch (opnum) {
	case 0: // accumulate(double)
	{
	    double $param_double_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_double_1 = in.readDouble();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.accumulate($param_double_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // accumulated()
	{
	    call.releaseInputStream();
	    double $result = server.accumulated();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeDouble($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // sub(double, double)
	{
	    double $param_double_1;
	    double $param_double_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_double_1 = in.readDouble();
		$param_double_2 = in.readDouble();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    double $result = server.sub($param_double_1, $param_double_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeDouble($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // sum(double, double)
	{
	    double $param_double_1;
	    double $param_double_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_double_1 = in.readDouble();
		$param_double_2 = in.readDouble();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    double $result = server.sum($param_double_1, $param_double_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeDouble($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
