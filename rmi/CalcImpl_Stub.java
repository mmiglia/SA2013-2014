// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package rmi;

public final class CalcImpl_Stub
    extends java.rmi.server.RemoteStub
    implements rmi.Calc, java.rmi.Remote
{
    private static final long serialVersionUID = 2;
    
    private static java.lang.reflect.Method $method_accumulate_0;
    private static java.lang.reflect.Method $method_accumulated_1;
    private static java.lang.reflect.Method $method_sub_2;
    private static java.lang.reflect.Method $method_sum_3;
    
    static {
	try {
	    $method_accumulate_0 = rmi.Calc.class.getMethod("accumulate", new java.lang.Class[] {double.class});
	    $method_accumulated_1 = rmi.Calc.class.getMethod("accumulated", new java.lang.Class[] {});
	    $method_sub_2 = rmi.Calc.class.getMethod("sub", new java.lang.Class[] {double.class, double.class});
	    $method_sum_3 = rmi.Calc.class.getMethod("sum", new java.lang.Class[] {double.class, double.class});
	} catch (java.lang.NoSuchMethodException e) {
	    throw new java.lang.NoSuchMethodError(
		"stub class initialization failed");
	}
    }
    
    // constructors
    public CalcImpl_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of accumulate(double)
    public void accumulate(double $param_double_1)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_accumulate_0, new java.lang.Object[] {new java.lang.Double($param_double_1)}, -2241937287305057797L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of accumulated()
    public double accumulated()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_accumulated_1, null, 834695635848383266L);
	    return ((java.lang.Double) $result).doubleValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of sub(double, double)
    public double sub(double $param_double_1, double $param_double_2)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_sub_2, new java.lang.Object[] {new java.lang.Double($param_double_1), new java.lang.Double($param_double_2)}, 1577242390162004133L);
	    return ((java.lang.Double) $result).doubleValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of sum(double, double)
    public double sum(double $param_double_1, double $param_double_2)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_sum_3, new java.lang.Object[] {new java.lang.Double($param_double_1), new java.lang.Double($param_double_2)}, 1121284161955957244L);
	    return ((java.lang.Double) $result).doubleValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
